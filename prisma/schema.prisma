generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Credential {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  adminId   String?  @unique
  studentId String?  @unique
  password  String   @db.Text
  admin     Admin?   @relation(fields: [adminId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("credential")
}

model Student {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  name       String
  email      String      @unique
  phone      String
  messages   Message[]
  tickets    Ticket[]
  credential Credential?

  @@map("student")
}

model Admin {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  name       String
  email      String      @unique
  phone      String
  messages   Message[]
  credential Credential?

  @@map("admin")
}

model Ticket {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  studentId   String
  subject     String
  description String       @db.Text
  status      TicketStatus @default(open)
  messages    Message[]
  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId], map: "Ticket_studentId_fkey")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  studentId String?
  adminId   String?
  content   String   @db.Text
  ticketId  String?
  admin     Admin?   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([adminId], map: "Message_adminId_fkey")
  @@index([studentId], map: "Message_studentId_fkey")
  @@index([ticketId], map: "Message_ticketId_fkey")
}

enum TicketStatus {
  open
  closed
  pending
  example
}
